package bindings

/*
#include "beagle.h"
*/
import "C"
import "fmt"

type BeagleProtocol int32

const (
	BG_PROTOCOL_NONE     = BeagleProtocol(C.BG_PROTOCOL_NONE)
	BG_PROTOCOL_COMMTEST = BeagleProtocol(C.BG_PROTOCOL_COMMTEST)
	BG_PROTOCOL_USB      = BeagleProtocol(C.BG_PROTOCOL_USB)
	BG_PROTOCOL_I2C      = BeagleProtocol(C.BG_PROTOCOL_I2C)
	BG_PROTOCOL_SPI      = BeagleProtocol(C.BG_PROTOCOL_SPI)
	BG_PROTOCOL_MDIO     = BeagleProtocol(C.BG_PROTOCOL_MDIO)
)

type BeagleVersion struct {
	Software        uint16
	Firmware        uint16
	Hardware        uint16
	Hw_revs_for_sw  uint32
	Fw_revs_for_sw  uint32
	Drv_revs_for_sw uint32
	Api_req_by_sw   uint16
}

func (version BeagleVersion) String() string {
	return fmt.Sprintf("Software %d.%d Firmware %d.%d Hardware %d.%d",
		(version.Software)>>8, version.Software&0xFF, (version.Firmware)>>8, version.Firmware&0xFF, (version.Hardware)>>8, version.Hardware&0xFF)
}

// BeagleSpiSSPolarity as declared in beagle/beagle.h:671
type BeagleSpiSSPolarity int32

type ReadStatus uint32

const (
	// BG_READ_OK as defined in beagle/beagle.h:534
	BG_READ_OK = ReadStatus(0)
	// BG_READ_TIMEOUT as defined in beagle/beagle.h:535
	BG_READ_TIMEOUT = ReadStatus(256)
	// BG_READ_ERR_MIDDLE_OF_PACKET as defined in beagle/beagle.h:536
	BG_READ_ERR_MIDDLE_OF_PACKET = ReadStatus(512)
	// BG_READ_ERR_SHORT_BUFFER as defined in beagle/beagle.h:537
	BG_READ_ERR_SHORT_BUFFER = ReadStatus(1024)
	// BG_READ_ERR_PARTIAL_LAST_BYTE as defined in beagle/beagle.h:538
	BG_READ_ERR_PARTIAL_LAST_BYTE = ReadStatus(2048)
	// BG_READ_ERR_PARTIAL_LAST_BYTE_MASK as defined in beagle/beagle.h:539
	BG_READ_ERR_PARTIAL_LAST_BYTE_MASK = ReadStatus(15)
	// BG_READ_ERR_UNEXPECTED as defined in beagle/beagle.h:540
	BG_READ_ERR_UNEXPECTED = ReadStatus(4096)
)

func (r ReadStatus) String() string {
	retVal := ""
	if r == BG_READ_OK{
		return "BG_READ_OK "
	}
	if r&BG_READ_TIMEOUT == BG_READ_TIMEOUT {
		retVal += "BG_READ_TIMEOUT "
	}
	if r&BG_READ_ERR_MIDDLE_OF_PACKET == BG_READ_ERR_MIDDLE_OF_PACKET {
		retVal += "BG_READ_ERR_MIDDLE_OF_PACKET "
	}
	if r&BG_READ_ERR_SHORT_BUFFER == BG_READ_ERR_SHORT_BUFFER {
		retVal += "BG_READ_ERR_SHORT_BUFFER "
	}
	if r&BG_READ_ERR_PARTIAL_LAST_BYTE == BG_READ_ERR_PARTIAL_LAST_BYTE {
		retVal += fmt.Sprintf("BG_READ_ERR_PARTIAL_LAST_BYTE(%02x)", r&0xFf)
	}
	if r&BG_READ_ERR_PARTIAL_LAST_BYTE_MASK == BG_READ_ERR_PARTIAL_LAST_BYTE_MASK {
		retVal += "BG_READ_ERR_PARTIAL_LAST_BYTE_MASK "
	}
	if r&BG_READ_ERR_UNEXPECTED == BG_READ_ERR_UNEXPECTED {
		retVal += "BG_READ_ERR_UNEXPECTED "
	}
	return retVal
}

// BeagleSpiSSPolarity enumeration from beagle/beagle.h:671
const (
	BG_SPI_SS_ACTIVE_LOW  = BeagleSpiSSPolarity(C.BG_SPI_SS_ACTIVE_LOW)
	BG_SPI_SS_ACTIVE_HIGH = BeagleSpiSSPolarity(C.BG_SPI_SS_ACTIVE_HIGH)
)

// BeagleSpiSckSamplingEdge as declared in beagle/beagle.h:679
type BeagleSpiSckSamplingEdge int32

// BeagleSpiSckSamplingEdge enumeration from beagle/beagle.h:679
const (
	BG_SPI_SCK_SAMPLING_EDGE_RISING  = BeagleSpiSckSamplingEdge(C.BG_SPI_SCK_SAMPLING_EDGE_RISING)
	BG_SPI_SCK_SAMPLING_EDGE_FALLING = BeagleSpiSckSamplingEdge(C.BG_SPI_SCK_SAMPLING_EDGE_FALLING)
)

// BeagleSpiBitorder as declared in beagle/beagle.h:687
type BeagleSpiBitorder int32

// BeagleSpiBitorder enumeration from beagle/beagle.h:687
const (
	BG_SPI_BITORDER_MSB = BeagleSpiBitorder(C.BG_SPI_BITORDER_MSB)
	BG_SPI_BITORDER_LSB = BeagleSpiBitorder(C.BG_SPI_BITORDER_LSB)
)

// BeagleStatus enumeration from beagle/beagle.h:118
const (
	BG_OK                                          = C.BeagleStatus(C.BG_OK)
	BG_UNABLE_TO_LOAD_LIBRARY                      = C.BeagleStatus(C.BG_UNABLE_TO_LOAD_LIBRARY)
	BG_UNABLE_TO_LOAD_DRIVER                       = C.BeagleStatus(C.BG_UNABLE_TO_LOAD_DRIVER)
	BG_UNABLE_TO_LOAD_FUNCTION                     = C.BeagleStatus(C.BG_UNABLE_TO_LOAD_FUNCTION)
	BG_INCOMPATIBLE_LIBRARY                        = C.BeagleStatus(C.BG_INCOMPATIBLE_LIBRARY)
	BG_INCOMPATIBLE_DEVICE                         = C.BeagleStatus(C.BG_INCOMPATIBLE_DEVICE)
	BG_INCOMPATIBLE_DRIVER                         = C.BeagleStatus(C.BG_INCOMPATIBLE_DRIVER)
	BG_COMMUNICATION_ERROR                         = C.BeagleStatus(C.BG_COMMUNICATION_ERROR)
	BG_UNABLE_TO_OPEN                              = C.BeagleStatus(C.BG_UNABLE_TO_OPEN)
	BG_UNABLE_TO_CLOSE                             = C.BeagleStatus(C.BG_UNABLE_TO_CLOSE)
	BG_INVALID_HANDLE                              = C.BeagleStatus(C.BG_INVALID_HANDLE)
	BG_CONFIG_ERROR                                = C.BeagleStatus(C.BG_CONFIG_ERROR)
	BG_UNKNOWN_PROTOCOL                            = C.BeagleStatus(C.BG_UNKNOWN_PROTOCOL)
	BG_STILL_ACTIVE                                = C.BeagleStatus(C.BG_STILL_ACTIVE)
	BG_FUNCTION_NOT_AVAILABLE                      = C.BeagleStatus(C.BG_FUNCTION_NOT_AVAILABLE)
	BG_INVALID_LICENSE                             = C.BeagleStatus(C.BG_INVALID_LICENSE)
	BG_CAPTURE_NOT_TRIGGERED                       = C.BeagleStatus(C.BG_CAPTURE_NOT_TRIGGERED)
	BG_CAPTURE_NOT_READY_FOR_DOWNLOAD              = C.BeagleStatus(C.BG_CAPTURE_NOT_READY_FOR_DOWNLOAD)
	BG_COMMTEST_NOT_AVAILABLE                      = C.BeagleStatus(C.BG_COMMTEST_NOT_AVAILABLE)
	BG_COMMTEST_NOT_ENABLED                        = C.BeagleStatus(C.BG_COMMTEST_NOT_ENABLED)
	BG_I2C_NOT_AVAILABLE                           = C.BeagleStatus(C.BG_I2C_NOT_AVAILABLE)
	BG_I2C_NOT_ENABLED                             = C.BeagleStatus(C.BG_I2C_NOT_ENABLED)
	BG_SPI_NOT_AVAILABLE                           = C.BeagleStatus(C.BG_SPI_NOT_AVAILABLE)
	BG_SPI_NOT_ENABLED                             = C.BeagleStatus(C.BG_SPI_NOT_ENABLED)
	BG_USB_NOT_AVAILABLE                           = C.BeagleStatus(C.BG_USB_NOT_AVAILABLE)
	BG_USB_NOT_ENABLED                             = C.BeagleStatus(C.BG_USB_NOT_ENABLED)
	BG_USB2_NOT_ENABLED                            = C.BeagleStatus(C.BG_USB2_NOT_ENABLED)
	BG_USB3_NOT_ENABLED                            = C.BeagleStatus(C.BG_USB3_NOT_ENABLED)
	BG_CROSS_ANALYZER_SYNC_DISTURBED_RE_ENABLE     = C.BeagleStatus(C.BG_CROSS_ANALYZER_SYNC_DISTURBED_RE_ENABLE)
	BG_CROSS_ANALYZER_SYNC_DISTURBED_RECONNECT     = C.BeagleStatus(C.BG_CROSS_ANALYZER_SYNC_DISTURBED_RECONNECT)
	BG_CROSS_ANALYZER_SYNC_UNLICENSED_SELF         = C.BeagleStatus(C.BG_CROSS_ANALYZER_SYNC_UNLICENSED_SELF)
	BG_CROSS_ANALYZER_SYNC_UNLICENSED_OTHER        = C.BeagleStatus(C.BG_CROSS_ANALYZER_SYNC_UNLICENSED_OTHER)
	BG_COMPLEX_CONFIG_ERROR_NO_STATES              = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_NO_STATES)
	BG_COMPLEX_CONFIG_ERROR_DATA_PACKET_TYPE       = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_DATA_PACKET_TYPE)
	BG_COMPLEX_CONFIG_ERROR_DATA_FIELD             = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_DATA_FIELD)
	BG_COMPLEX_CONFIG_ERROR_ERR_MATCH_FIELD        = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_ERR_MATCH_FIELD)
	BG_COMPLEX_CONFIG_ERROR_DATA_RESOURCES         = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_DATA_RESOURCES)
	BG_COMPLEX_CONFIG_ERROR_DP_MATCH_TYPE          = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_DP_MATCH_TYPE)
	BG_COMPLEX_CONFIG_ERROR_DP_MATCH_VAL           = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_DP_MATCH_VAL)
	BG_COMPLEX_CONFIG_ERROR_DP_REQUIRED            = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_DP_REQUIRED)
	BG_COMPLEX_CONFIG_ERROR_DP_RESOURCES           = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_DP_RESOURCES)
	BG_COMPLEX_CONFIG_ERROR_TIMER_UNIT             = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_TIMER_UNIT)
	BG_COMPLEX_CONFIG_ERROR_TIMER_BOUNDS           = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_TIMER_BOUNDS)
	BG_COMPLEX_CONFIG_ERROR_ASYNC_EVENT            = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_ASYNC_EVENT)
	BG_COMPLEX_CONFIG_ERROR_ASYNC_EDGE             = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_ASYNC_EDGE)
	BG_COMPLEX_CONFIG_ERROR_ACTION_FILTER          = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_ACTION_FILTER)
	BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_SEL        = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_SEL)
	BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_DEST       = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_DEST)
	BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_TYPE  = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_TYPE)
	BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_THRES = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_THRES)
	BG_COMPLEX_CONFIG_ERROR_NO_MULTI_VBUS_TRIGGERS = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_NO_MULTI_VBUS_TRIGGERS)
	BG_COMPLEX_CONFIG_ERROR_IV_MONITOR_NOT_ENABLED = C.BeagleStatus(C.BG_COMPLEX_CONFIG_ERROR_IV_MONITOR_NOT_ENABLED)
	BG_MDIO_NOT_AVAILABLE                          = C.BeagleStatus(C.BG_MDIO_NOT_AVAILABLE)
	BG_MDIO_NOT_ENABLED                            = C.BeagleStatus(C.BG_MDIO_NOT_ENABLED)
	BG_MDIO_BAD_TURNAROUND                         = C.BeagleStatus(C.BG_MDIO_BAD_TURNAROUND)
	BG_IV_MON_NULL_PACKET                          = C.BeagleStatus(C.BG_IV_MON_NULL_PACKET)
	BG_IV_MON_INVALID_PACKET_LENGTH                = C.BeagleStatus(C.BG_IV_MON_INVALID_PACKET_LENGTH)
)

func (status C.BeagleStatus) String() string {
	switch status {
	case BG_OK:
		return fmt.Sprintf("BG_OK (%d)", int(BG_OK))
	case BG_UNABLE_TO_LOAD_LIBRARY:
		return fmt.Sprintf("BG_UNABLE_TO_LOAD_LIBRARY (%d)", int(BG_UNABLE_TO_LOAD_LIBRARY))
	case BG_UNABLE_TO_LOAD_DRIVER:
		return fmt.Sprintf("BG_UNABLE_TO_LOAD_DRIVER (%d)", int(BG_UNABLE_TO_LOAD_DRIVER))
	case BG_UNABLE_TO_LOAD_FUNCTION:
		return fmt.Sprintf("BG_UNABLE_TO_LOAD_FUNCTION (%d)", int(BG_UNABLE_TO_LOAD_FUNCTION))
	case BG_INCOMPATIBLE_LIBRARY:
		return fmt.Sprintf("BG_INCOMPATIBLE_LIBRARY (%d)", int(BG_INCOMPATIBLE_LIBRARY))
	case BG_INCOMPATIBLE_DEVICE:
		return fmt.Sprintf("BG_INCOMPATIBLE_DEVICE (%d)", int(BG_INCOMPATIBLE_DEVICE))
	case BG_INCOMPATIBLE_DRIVER:
		return fmt.Sprintf("BG_INCOMPATIBLE_DRIVER (%d)", int(BG_INCOMPATIBLE_DRIVER))
	case BG_COMMUNICATION_ERROR:
		return fmt.Sprintf("BG_COMMUNICATION_ERROR (%d)", int(BG_COMMUNICATION_ERROR))
	case BG_UNABLE_TO_OPEN:
		return fmt.Sprintf("BG_UNABLE_TO_OPEN (%d)", int(BG_UNABLE_TO_OPEN))
	case BG_UNABLE_TO_CLOSE:
		return fmt.Sprintf("BG_UNABLE_TO_CLOSE (%d)", int(BG_UNABLE_TO_CLOSE))
	case BG_INVALID_HANDLE:
		return fmt.Sprintf("BG_INVALID_HANDLE (%d)", int(BG_INVALID_HANDLE))
	case BG_CONFIG_ERROR:
		return fmt.Sprintf("BG_CONFIG_ERROR (%d)", int(BG_CONFIG_ERROR))
	case BG_UNKNOWN_PROTOCOL:
		return fmt.Sprintf("BG_UNKNOWN_PROTOCOL (%d)", int(BG_UNKNOWN_PROTOCOL))
	case BG_STILL_ACTIVE:
		return fmt.Sprintf("BG_STILL_ACTIVE (%d)", int(BG_STILL_ACTIVE))
	case BG_FUNCTION_NOT_AVAILABLE:
		return fmt.Sprintf("BG_FUNCTION_NOT_AVAILABLE (%d)", int(BG_FUNCTION_NOT_AVAILABLE))
	case BG_INVALID_LICENSE:
		return fmt.Sprintf("BG_INVALID_LICENSE (%d)", int(BG_INVALID_LICENSE))
	case BG_CAPTURE_NOT_TRIGGERED:
		return fmt.Sprintf("BG_CAPTURE_NOT_TRIGGERED (%d)", int(BG_CAPTURE_NOT_TRIGGERED))
	case BG_CAPTURE_NOT_READY_FOR_DOWNLOAD:
		return fmt.Sprintf("BG_CAPTURE_NOT_READY_FOR_DOWNLOAD (%d)", int(BG_CAPTURE_NOT_READY_FOR_DOWNLOAD))
	case BG_COMMTEST_NOT_AVAILABLE:
		return fmt.Sprintf("BG_COMMTEST_NOT_AVAILABLE (%d)", int(BG_COMMTEST_NOT_AVAILABLE))
	case BG_COMMTEST_NOT_ENABLED:
		return fmt.Sprintf("BG_COMMTEST_NOT_ENABLED (%d)", int(BG_COMMTEST_NOT_ENABLED))
	case BG_I2C_NOT_AVAILABLE:
		return fmt.Sprintf("BG_I2C_NOT_AVAILABLE (%d)", int(BG_I2C_NOT_AVAILABLE))
	case BG_I2C_NOT_ENABLED:
		return fmt.Sprintf("BG_I2C_NOT_ENABLED (%d)", int(BG_I2C_NOT_ENABLED))
	case BG_SPI_NOT_AVAILABLE:
		return fmt.Sprintf("BG_SPI_NOT_AVAILABLE (%d)", int(BG_SPI_NOT_AVAILABLE))
	case BG_SPI_NOT_ENABLED:
		return fmt.Sprintf("BG_SPI_NOT_ENABLED (%d)", int(BG_SPI_NOT_ENABLED))
	case BG_USB_NOT_AVAILABLE:
		return fmt.Sprintf("BG_USB_NOT_AVAILABLE (%d)", int(BG_USB_NOT_AVAILABLE))
	case BG_USB_NOT_ENABLED:
		return fmt.Sprintf("BG_USB_NOT_ENABLED (%d)", int(BG_USB_NOT_ENABLED))
	case BG_USB2_NOT_ENABLED:
		return fmt.Sprintf("BG_USB2_NOT_ENABLED (%d)", int(BG_USB2_NOT_ENABLED))
	case BG_USB3_NOT_ENABLED:
		return fmt.Sprintf("BG_USB3_NOT_ENABLED (%d)", int(BG_USB3_NOT_ENABLED))
	case BG_CROSS_ANALYZER_SYNC_DISTURBED_RE_ENABLE:
		return fmt.Sprintf("BG_CROSS_ANALYZER_SYNC_DISTURBED_RE_ENABLE (%d)", int(BG_CROSS_ANALYZER_SYNC_DISTURBED_RE_ENABLE))
	case BG_CROSS_ANALYZER_SYNC_DISTURBED_RECONNECT:
		return fmt.Sprintf("BG_CROSS_ANALYZER_SYNC_DISTURBED_RECONNECT (%d)", int(BG_CROSS_ANALYZER_SYNC_DISTURBED_RECONNECT))
	case BG_CROSS_ANALYZER_SYNC_UNLICENSED_SELF:
		return fmt.Sprintf("BG_CROSS_ANALYZER_SYNC_UNLICENSED_SELF (%d)", int(BG_CROSS_ANALYZER_SYNC_UNLICENSED_SELF))
	case BG_CROSS_ANALYZER_SYNC_UNLICENSED_OTHER:
		return fmt.Sprintf("BG_CROSS_ANALYZER_SYNC_UNLICENSED_OTHER (%d)", int(BG_CROSS_ANALYZER_SYNC_UNLICENSED_OTHER))
	case BG_COMPLEX_CONFIG_ERROR_NO_STATES:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_NO_STATES (%d)", int(BG_COMPLEX_CONFIG_ERROR_NO_STATES))
	case BG_COMPLEX_CONFIG_ERROR_DATA_PACKET_TYPE:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_DATA_PACKET_TYPE (%d)", int(BG_COMPLEX_CONFIG_ERROR_DATA_PACKET_TYPE))
	case BG_COMPLEX_CONFIG_ERROR_DATA_FIELD:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_DATA_FIELD (%d)", int(BG_COMPLEX_CONFIG_ERROR_DATA_FIELD))
	case BG_COMPLEX_CONFIG_ERROR_ERR_MATCH_FIELD:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_ERR_MATCH_FIELD (%d)", int(BG_COMPLEX_CONFIG_ERROR_ERR_MATCH_FIELD))
	case BG_COMPLEX_CONFIG_ERROR_DATA_RESOURCES:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_DATA_RESOURCES (%d)", int(BG_COMPLEX_CONFIG_ERROR_DATA_RESOURCES))
	case BG_COMPLEX_CONFIG_ERROR_DP_MATCH_TYPE:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_DP_MATCH_TYPE (%d)", int(BG_COMPLEX_CONFIG_ERROR_DP_MATCH_TYPE))
	case BG_COMPLEX_CONFIG_ERROR_DP_MATCH_VAL:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_DP_MATCH_VAL (%d)", int(BG_COMPLEX_CONFIG_ERROR_DP_MATCH_VAL))
	case BG_COMPLEX_CONFIG_ERROR_DP_REQUIRED:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_DP_REQUIRED (%d)", int(BG_COMPLEX_CONFIG_ERROR_DP_REQUIRED))
	case BG_COMPLEX_CONFIG_ERROR_DP_RESOURCES:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_DP_RESOURCES (%d)", int(BG_COMPLEX_CONFIG_ERROR_DP_RESOURCES))
	case BG_COMPLEX_CONFIG_ERROR_TIMER_UNIT:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_TIMER_UNIT (%d)", int(BG_COMPLEX_CONFIG_ERROR_TIMER_UNIT))
	case BG_COMPLEX_CONFIG_ERROR_TIMER_BOUNDS:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_TIMER_BOUNDS (%d)", int(BG_COMPLEX_CONFIG_ERROR_TIMER_BOUNDS))
	case BG_COMPLEX_CONFIG_ERROR_ASYNC_EVENT:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_ASYNC_EVENT (%d)", int(BG_COMPLEX_CONFIG_ERROR_ASYNC_EVENT))
	case BG_COMPLEX_CONFIG_ERROR_ASYNC_EDGE:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_ASYNC_EDGE (%d)", int(BG_COMPLEX_CONFIG_ERROR_ASYNC_EDGE))
	case BG_COMPLEX_CONFIG_ERROR_ACTION_FILTER:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_ACTION_FILTER (%d)", int(BG_COMPLEX_CONFIG_ERROR_ACTION_FILTER))
	case BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_SEL:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_SEL (%d)", int(BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_SEL))
	case BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_DEST:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_DEST (%d)", int(BG_COMPLEX_CONFIG_ERROR_ACTION_GOTO_DEST))
	case BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_TYPE:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_TYPE (%d)", int(BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_TYPE))
	case BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_THRES:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_THRES (%d)", int(BG_COMPLEX_CONFIG_ERROR_BAD_VBUS_TRIGGER_THRES))
	case BG_COMPLEX_CONFIG_ERROR_NO_MULTI_VBUS_TRIGGERS:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_NO_MULTI_VBUS_TRIGGERS (%d)", int(BG_COMPLEX_CONFIG_ERROR_NO_MULTI_VBUS_TRIGGERS))
	case BG_COMPLEX_CONFIG_ERROR_IV_MONITOR_NOT_ENABLED:
		return fmt.Sprintf("BG_COMPLEX_CONFIG_ERROR_IV_MONITOR_NOT_ENABLED (%d)", int(BG_COMPLEX_CONFIG_ERROR_IV_MONITOR_NOT_ENABLED))
	case BG_MDIO_NOT_AVAILABLE:
		return fmt.Sprintf("BG_MDIO_NOT_AVAILABLE (%d)", int(BG_MDIO_NOT_AVAILABLE))
	case BG_MDIO_NOT_ENABLED:
		return fmt.Sprintf("BG_MDIO_NOT_ENABLED (%d)", int(BG_MDIO_NOT_ENABLED))
	case BG_MDIO_BAD_TURNAROUND:
		return fmt.Sprintf("BG_MDIO_BAD_TURNAROUND (%d)", int(BG_MDIO_BAD_TURNAROUND))
	case BG_IV_MON_NULL_PACKET:
		return fmt.Sprintf("BG_IV_MON_NULL_PACKET (%d)", int(BG_IV_MON_NULL_PACKET))
	case BG_IV_MON_INVALID_PACKET_LENGTH:
		return fmt.Sprintf("BG_IV_MON_INVALID_PACKET_LENGTH (%d)", int(BG_IV_MON_INVALID_PACKET_LENGTH))
	}
	return fmt.Sprintf("Unknown Status (%d)", int(status))
}
